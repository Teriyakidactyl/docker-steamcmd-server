# TODO UDP process monitor https://github.com/lloesche/valheim-server-docker/blob/0996dc3a1fc1f5f88bcbd4056a28254adadb884e/common#L148
# TODO RCON Configuration https://conanexiles.fandom.com/wiki/Rcon
# TODO RCON 'Attach' mode


check_whitelist() {
    if [ -n "$SERVER_ALLOW_LIST" ]; then
        update_config_element "EnableWhitelist" "True"
        
        # Remove existing whitelist file if it exists
        if [ -f "$STEAM_ALLOW_LIST_PATH" ]; then
            rm "$STEAM_ALLOW_LIST_PATH" || { log "Failed to remove existing whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        fi
        
        # Create an empty whitelist file
        touch "$STEAM_ALLOW_LIST_PATH" || { log "Failed to create whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        
        # Populate whitelist file with STEAM_IDs
        # Split SERVER_ALLOW_LIST on commas and iterate over each part
        IFS=", " read -r -a STEAM_IDS <<< "$SERVER_ALLOW_LIST"
        for STEAM_ID in "${STEAM_IDS[@]}"; do
            echo "$STEAM_ID" >> "$STEAM_ALLOW_LIST_PATH" || { log "Failed to write to whitelist file: $STEAM_ALLOW_LIST_PATH"; return 1; }
        done
        
        log "Allow list created:"
        cat "$STEAM_ALLOW_LIST_PATH" | log_stdout
    fi
}

wine_setup (){

    export WINEARCH="win64"
    #export WINE_MONO_VERSION=4.9.4             # https://wiki.winehq.org/Mono
    export WINEDEBUG=fixme-all                  # https://wiki.winehq.org/Debug_Channels

    # https://wiki.winehq.org/FAQ#Is_there_a_64_bit_Wine , https://wiki.winehq.org/FAQ#How_do_I_create_a_32_bit_wineprefix_on_a_64_bit_system?
    # It requires the installation of 32 bit libraries in order to run 32 bit Windows applications

    # Check first time wine run, this will force Wine config creation so that our server load won't fail on first run.
    if [ ! -d "$WINEPREFIX" ]; then
        # https://wiki.winehq.org/Wineboot
        log "First run detected, wait 15 seconds for wine config creation."
        if echo "$ARCH" | grep -q "arm"; then
            box64 wine64 wineboot -iuf | log_stdout
        else
            wine64 wineboot -iuf | log_stdout
        fi
    fi
}

server_update () {

    # TODO evalute if APP_PID is present, if so take down for update.

    log "Starting steamcmd update"

    if [ ! -d "$STEAMCMD_PROFILE" ]; then \
        log "$STEAMCMD_PATH directory not complete, presuming first run."
        $STEAMCMD_PATH/steamcmd.sh +login anonymous +quit | log_stdout
    fi

    # Update server 
    # Refference: https://developer.valvesoftware.com/wiki/SteamCMD
    log "SteamCMD begining download of $APP_NAME"

    $STEAMCMD_PATH/steamcmd.sh \
    +@sSteamCmdForcePlatformType windows \
    +force_install_dir $APP_FILES \
    +login anonymous \
    +app_update $STEAM_SERVER_APPID \
    validate \
    +quit | log_stdout

}

needs_update() {
    local STEAM_SERVER_APPID=$1
    local API_URL="https://api.steamcmd.net/v1/info/$STEAM_SERVER_APPID"
    local MANIFEST_FILE="$APP_FILES/steamapps/appmanifest_${STEAM_CON_SERVER_APPID}.acf"

    # TODO log local and remote version
    # Don't refference ENV, refference local?

    # Get buildid from API
    local API_BUILDID=$(curl -s "$API_URL" | grep -oP '"public":\s*\{\s*"buildid":\s*"\K[^"]+')

    # Get buildid from local manifest
    local LOCAL_BUILDID=$(grep -oP '"buildid"\s+"\K[^"]+' "$MANIFEST_FILE")

    # Compare buildids
    if [[ "$API_BUILDID" > "$LOCAL_BUILDID" ]]; then
        echo "Update Needed"
        return 0  # True, update needed
    else
        echo "Undate not Needed"
        return 1  # False, no update needed
    fi
}

mod_updates() {
    
    # https://forums.funcom.com/t/conan-exiles-dedicated-server-launcher-official-version-1-7-8-beta-1-7-9/21699#mods
    # force_install_dir "$WORLD_FILES/Mods" > /Mods/steamapps/workshop/conent/$MOD_ID

    # mod_updates(): Manages mods for Conan Exiles server
    # - Downloads specified mods via SteamCMD
    # - Removes unspecified mods
    # - Updates modlist.txt
    # Logic:
    # 1. If mods specified:
    #    - Download each mod
    #    - Link .pak files to server mod directory
    #    - Remove obsolete mods
    #    - Update modlist.txt
    # 2. If no mods: Clear mod directory, create empty modlist.txt

    # Mod Updates
    if [ -n "$SERVER_MOD_IDS" ]; then
        # Create an array of current mod IDs
        IFS=',' read -ra MOD_IDS <<< "$SERVER_MOD_IDS"
        rm -rd /world/Mods/*
        # Download and update mods
        for MOD_ID in "${MOD_IDS[@]}"; do
            log "Downloading mod with ID: $MOD_ID"
            $STEAMCMD_PATH/steamcmd.sh \
            +force_install_dir "$STEAM_LIBRARY" \
            +login anonymous \
            +workshop_download_item $STEAM_CONAN_CLIENT_APPID $MOD_ID \
            +quit | log_stdout
            find "$STEAM_LIBRARY" -path "*$MOD_ID*.pak" -exec ln -sf {} /world/Mods \; 
        done

        # Remove mods that are no longer in the list
        for MOD_DIR in "$WORLD_FILES/Mods"/*; do
            if [ -d "$MOD_DIR" ]; then
                MOD_ID=$(basename "$MOD_DIR")
                if ! [[ " ${MOD_IDS[@]} " =~ " ${MOD_ID} " ]]; then
                    log "Removing mod with ID: $MOD_ID"
                    rm -rf "$MOD_DIR"
                fi
            fi
        done

        # Create the modlist.txt file
        # FIXME this implementation is probably Conan Specific
        find "$WORLD_FILES/Mods" -type l -name "*.pak" -exec basename {} \; | sed 's/^/*/' > "$WORLD_FILES/Mods/modlist.txt"
        log "Mods enabled: "
        cat $WORLD_FILES/Mods/modlist.txt | log_stdout
    else
        rm -rf $WORLD_FILES/Mods/*
        > "$WORLD_FILES/Mods/modlist.txt"  # Create empty modlist.txt
    fi

}


